// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eximo.data;

namespace eximo.data.Migrations
{
    [DbContext(typeof(EximoDataContext))]
    [Migration("20191115021905_InitalEximoCreate")]
    partial class InitalEximoCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("eximo.core.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("PostalZip");

                    b.Property<string>("State");

                    b.Property<string>("StreetOne");

                    b.Property<string>("StreetTwo");

                    b.Property<int>("UserId");

                    b.HasKey("AddressId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Americus",
                            PostalZip = "31709",
                            State = "GA",
                            StreetOne = "123 South lee st",
                            StreetTwo = "example street two",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("eximo.core.Models.AuthorizationType", b =>
                {
                    b.Property<int>("AuthorizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AuthorizationActive");

                    b.Property<string>("AuthorizationName");

                    b.Property<int>("UserId");

                    b.HasKey("AuthorizationId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorizationTypes");

                    b.HasData(
                        new
                        {
                            AuthorizationId = 1,
                            AuthorizationActive = true,
                            AuthorizationName = "Email",
                            UserId = 1
                        },
                        new
                        {
                            AuthorizationId = 2,
                            AuthorizationActive = true,
                            AuthorizationName = "Phone",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("eximo.core.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContactAddressAddressId");

                    b.Property<int?>("PhoneNumberPhoneId");

                    b.Property<int>("UserId");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactAddressAddressId");

                    b.HasIndex("PhoneNumberPhoneId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("eximo.core.Models.DataBroker", b =>
                {
                    b.Property<int>("DataBrokerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<string>("CaptureCustomerInfo");

                    b.Property<int>("CustomerAccountStatus");

                    b.Property<string>("Name");

                    b.Property<string>("OptOutLink");

                    b.Property<int>("UserId");

                    b.Property<string>("VerificationType");

                    b.Property<string>("Website");

                    b.HasKey("DataBrokerId");

                    b.HasIndex("UserId");

                    b.ToTable("DataBrokers");

                    b.HasData(
                        new
                        {
                            DataBrokerId = 1,
                            Bio = "Some bio information",
                            CaptureCustomerInfo = "[\"Email\",\"Phone\"]",
                            CustomerAccountStatus = 0,
                            Name = "Databroker One",
                            OptOutLink = "http://optoutlink.com",
                            UserId = 1,
                            VerificationType = "Email",
                            Website = "http://databrokerone.com"
                        });
                });

            modelBuilder.Entity("eximo.core.Models.EmailMarketing", b =>
                {
                    b.Property<int>("EmailMarketingId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EmailMarketingStatus");

                    b.Property<string>("MarketerName");

                    b.Property<int>("UserId");

                    b.Property<string>("Website");

                    b.HasKey("EmailMarketingId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailMarketings");

                    b.HasData(
                        new
                        {
                            EmailMarketingId = 1,
                            EmailMarketingStatus = 0,
                            MarketerName = "Email Marketing Name Example",
                            UserId = 1,
                            Website = "http://emailmarketersite.com"
                        });
                });

            modelBuilder.Entity("eximo.core.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("NotificationCompleted");

                    b.Property<DateTime>("NotificationDate");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            NotificationCompleted = false,
                            NotificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Notification Title",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("eximo.core.Models.PaymentInfo", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardName");

                    b.Property<string>("CardNumber");

                    b.Property<string>("CardType");

                    b.Property<int>("SecurityNumber");

                    b.Property<int>("UserId");

                    b.HasKey("PaymentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            CardName = "James Brown",
                            CardNumber = "123445677890",
                            CardType = "Visa",
                            SecurityNumber = 299,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("eximo.core.Models.Phone", b =>
                {
                    b.Property<int>("PhoneId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaCode");

                    b.Property<int>("PhoneNumber");

                    b.Property<int>("UserId");

                    b.HasKey("PhoneId");

                    b.HasIndex("UserId");

                    b.ToTable("Phone");

                    b.HasData(
                        new
                        {
                            PhoneId = 1,
                            AreaCode = 229,
                            PhoneNumber = 5555555,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("eximo.core.Models.ServicePlan", b =>
                {
                    b.Property<int>("ServicePlanId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ServiceName");

                    b.Property<int>("UserId");

                    b.HasKey("ServicePlanId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ServicePlan");

                    b.HasData(
                        new
                        {
                            ServicePlanId = 1,
                            ServiceName = "Basic",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("eximo.core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "jbrown@mail.com",
                            FirstName = "James",
                            LastName = "Brown",
                            Password = "abc123",
                            UserName = "jbrown"
                        });
                });

            modelBuilder.Entity("eximo.core.Models.AuthorizationType", b =>
                {
                    b.HasOne("eximo.core.Models.User", "User")
                        .WithMany("Authorizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eximo.core.Models.Contact", b =>
                {
                    b.HasOne("eximo.core.Models.Address", "ContactAddress")
                        .WithMany()
                        .HasForeignKey("ContactAddressAddressId");

                    b.HasOne("eximo.core.Models.Phone", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberPhoneId");

                    b.HasOne("eximo.core.Models.User", "User")
                        .WithOne("ContactInformation")
                        .HasForeignKey("eximo.core.Models.Contact", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eximo.core.Models.DataBroker", b =>
                {
                    b.HasOne("eximo.core.Models.User", "User")
                        .WithMany("Databrokers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eximo.core.Models.EmailMarketing", b =>
                {
                    b.HasOne("eximo.core.Models.User", "User")
                        .WithMany("EmailMarketings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eximo.core.Models.Notification", b =>
                {
                    b.HasOne("eximo.core.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eximo.core.Models.PaymentInfo", b =>
                {
                    b.HasOne("eximo.core.Models.User", "User")
                        .WithOne("Payment")
                        .HasForeignKey("eximo.core.Models.PaymentInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eximo.core.Models.Phone", b =>
                {
                    b.HasOne("eximo.core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eximo.core.Models.ServicePlan", b =>
                {
                    b.HasOne("eximo.core.Models.User", "User")
                        .WithOne("Plan")
                        .HasForeignKey("eximo.core.Models.ServicePlan", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
